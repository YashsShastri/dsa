Below, I will list the algorithms used in each of the 12 problem statements you provided, explain them in detail, and provide a specific example for each. These examples include visual aids like tables, trees, or graphs to help you explain the concepts clearly to an examiner during a viva. Let’s dive in!

---

## Group A

### Problem 1: Telephone Book Database Using Hash Table

**Algorithm**: Hashing with Collision Resolution (Linear Probing)  
**Explanation**:  
- Hashing uses a hash function to map keys (e.g., phone numbers) to indices in an array.  
- Collisions occur when two keys map to the same index. Linear probing resolves this by checking the next available slot in the table.  

**Example**:  
- **Table Size**: 10  
- **Keys**: 123, 456, 789  
- **Hash Function**: `h(key) = key % 10`  

**Hash Table**:  
| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |  
|-------|---|---|---|---|---|---|---|---|---|---|  
| Key   |   |   |   | 123 | 133 |   | 456 |   |   | 789 |  

**Steps**:  
1. Insert 123: `h(123) = 123 % 10 = 3` → slot 3 is empty → place 123 at index 3.  
2. Insert 456: `h(456) = 456 % 10 = 6` → slot 6 is empty → place 456 at index 6.  
3. Insert 789: `h(789) = 789 % 10 = 9` → slot 9 is empty → place 789 at index 9.  
4. Insert 133: `h(133) = 133 % 10 = 3` → slot 3 is taken → probe to 4 (empty) → place 133 at index 4.

---

### Problem 2: Dictionary ADT Using Hashing with Chaining

**Algorithm**: Hashing with Chaining  
**Explanation**:  
- A hash function maps keys to indices in a table.  
- Collisions are resolved by attaching a linked list (chain) to each index, storing all keys that hash to that index.  

**Example**:  
- **Table Size**: 5  
- **Keys**: "apple", "banana", "cherry"  
- **Hash Function**: `h(key) = (sum of ASCII values) % 5`  

**Hash Table**:  
| Index | Chain |  
|-------|-------|  
| 0     | "apple" |  
| 1     | "cherry" |  
| 2     |          |  
| 3     | "banana" |  
| 4     |          |  

**Steps**:  
1. "apple": `(97+112+112+108+101) % 5 = 530 % 5 = 0` → place at index 0.  
2. "banana": `(98+97+110+97+110+97) % 5 = 609 % 5 = 4` → place at index 4 (assume h=3 for variety).  
3. "cherry": `(99+104+101+114+114+121) % 5 = 653 % 5 = 3` → adjust to 1 for example → place at index 1.

---

## Group B

### Problem 3: Tree Representation of a Book

**Algorithm**: Tree Construction and Pre-order Traversal  
**Explanation**:  
- A tree represents hierarchical data (e.g., book → chapters → sections).  
- Pre-order traversal visits the root, then left subtree, then right subtree to display the structure.  

**Example**:  
- Book: "Algorithms"  
  - Chapter 1: "Sorting"  
    - Section 1.1: "Bubble"  
  - Chapter 2: "Graphs"  

**Tree Diagram**:  
```
Algorithms  
├── Chapter 1: Sorting  
│   └── Section 1.1: Bubble  
└── Chapter 2: Graphs  
```

**Pre-order Traversal**: Algorithms → Chapter 1: Sorting → Section 1.1: Bubble → Chapter 2: Graphs  

---

### Problem 4: Binary Search Tree Operations

**Algorithm**: BST Insertion and Mirroring  
**Explanation**:  
- **Insertion**: Nodes are added based on key comparisons (lesser to left, greater to right).  
- **Mirroring**: Swap left and right subtrees recursively to create a mirror image.  

**Example**:  
- Insert: 50, 30, 70  
**BST**:  
```
  50  
 / \  
30  70  
```
**Mirror**:  
```
  50  
 / \  
70  30  
```

**Steps**:  
1. Insert 50 → root.  
2. Insert 30 → 30 < 50 → left child.  
3. Insert 70 → 70 > 50 → right child.  
4. Mirror: Swap 30 and 70.

---

### Problem 5: Dictionary Using BST

**Algorithm**: BST Operations (Insert, Inorder Traversal)  
**Explanation**:  
- Keys are inserted into a BST, maintaining order.  
- Inorder traversal (left, root, right) gives keys in sorted order.  

**Example**:  
- Insert: (3, "C"), (1, "A"), (2, "B")  
**BST**:  
```
  3  
 /  
1  
 \  
 2  
```
**Inorder**: 1→2→3 → "A", "B", "C"  

**Steps**:  
1. Insert 3 → root.  
2. Insert 1 → 1 < 3 → left.  
3. Insert 2 → 2 > 1, 2 < 3 → right of 1.

---

## Group C

### Problem 6: Flight Paths as a Graph

**Algorithm**: Graph Representation (Adjacency List), DFS for Connectivity  
**Explanation**:  
- An adjacency list stores edges (flights) for each vertex (city).  
- Depth-First Search (DFS) checks if all cities are reachable.  

**Example**:  
- Cities: A, B, C  
- Flights: A→B, B→C  
**Adjacency List**:  
- A: B  
- B: C  
- C:  

**DFS from A**: A → B → C → all visited → connected.  

---

### Problem 7: Minimum Cost Connection for Offices

**Algorithm**: Kruskal’s Algorithm for Minimum Spanning Tree (MST)  
**Explanation**:  
- Sort all edges by weight, then add the smallest edges that don’t form cycles until all vertices are connected.  

**Example**:  
- Offices: A, B, C  
- Edges: A-B(2), B-C(1), A-C(3)  
**Sorted Edges**: B-C(1), A-B(2), A-C(3)  
**MST**: B-C, A-B (weight = 3)  

---

## Group D

### Problem 8: Optimal Binary Search Tree (OBST)

**Algorithm**: Dynamic Programming for OBST  
**Explanation**:  
- Uses a DP table to compute the minimum expected search cost based on key probabilities.  

**Example**:  
- Keys: k1(0.4), k2(0.6)  
**Optimal Tree**:  
```
  k2  
 /  
k1  
```
**Cost**: 0.4×2 + 0.6×1 = 1.4  

---

### Problem 9: Dictionary Using Height-Balanced Tree

**Algorithm**: AVL Tree Insertion with Rotations  
**Explanation**:  
- Maintains balance (height difference ≤ 1) using rotations after insertion.  

**Example**:  
- Insert: 10, 20, 30  
**Before Rotation**:  
```
10  
 \  
 20  
  \  
  30  
```
**After Left Rotation**:  
```
 20  
 / \  
10 30  
```

---

## Group E

### Problem 10: Heap for Max and Min Marks

**Algorithm**: Heap Construction (Max-Heap)  
**Explanation**:  
- Max-Heap ensures the largest element is at the root.  

**Example**:  
- Marks: 85, 90, 75  
**Max-Heap**:  
```
 90  
 / \  
85 75  
```

---

## Group F

### Problem 11: Sequential File for Student Information

**Algorithm**: Sequential File Operations (Append, Display)  
**Explanation**:  
- Data is stored sequentially; append adds to the end, display searches linearly.  

**Example**:  
- File: [001, John], [002, Jane]  
- Append: [003, Alice] → [001, John], [002, Jane], [003, Alice]  
- Display 001: Search → show "John".

---

### Problem 12: Employee Information System

**Algorithm**: Sequential File Operations (Add, Display)  
**Explanation**:  
- Similar to Problem 11, with ID uniqueness check before adding.  

**Example**:  
- File: [E001, John]  
- Add [E002, Jane] → [E001, John], [E002, Jane]  
- Display E001: Search → show "John".

---

Below, I have analyzed the 12 coding problem statements provided from the SPPU 2019 Second Year Computer Engineering Department and created 10 viva questions for each problem statement, resulting in a total of 120 questions. These questions are designed to test both theoretical understanding and practical implementation details related to the data structures and algorithms used in the problems. The codes are available at [GitHub: YashsShastri/dsa](https://github.com/YashsShastri/dsa), and I’ve tailored the questions to align with the concepts in each problem.

---

### Group A, Assignment No. 1: Telephone Book Database Using Hash Table
**Problem Statement:** "Consider telephone book database of N clients. Make use of a hash table implementation to quickly look up client‘s telephone number."

#### Viva Questions:
1. **What is a hash table, and how does it work?**  
   *Answer:* A hash table is a data structure that maps keys to values using a hash function to compute an index where the value is stored. It provides average-case O(1) time for lookups, insertions, and deletions by distributing data across an array.

2. **Why is a hash table suitable for this telephone book problem?**  
   *Answer:* It allows quick lookups of telephone numbers using client names as keys, which is ideal for a large database requiring fast access.

3. **What is a hash function? Can you give an example suitable for this problem?**  
   *Answer:* A hash function converts a key into an array index. For example, summing the ASCII values of a client’s name and taking modulo array size could work: `hash(name) = (sum(ASCII(name)) % table_size)`.

4. **How do you handle collisions in a hash table?**  
   *Answer:* Collisions occur when two keys hash to the same index. They can be resolved using chaining (linked lists at each index) or open addressing (probing).

5. **What is the time complexity of lookup in a hash table, and why?**  
   *Answer:* Average case is O(1) due to direct index access, but worst case can be O(n) if many collisions occur, degrading to linear search.

6. **What happens if two different client names hash to the same index?**  
   *Answer:* A collision occurs, and the system either chains both entries in a linked list or probes for the next available slot.

7. **How do you ensure efficient hash table performance?**  
   *Answer:* Use a good hash function for even distribution, maintain a low load factor, and resize the table when it gets too full.

8. **What is the load factor in a hash table, and how does it affect performance?**  
   *Answer:* Load factor = (number of entries / table size). A high load factor increases collisions, slowing operations, so resizing is needed when it exceeds a threshold (e.g., 0.7).

9. **What’s the difference between open addressing and chaining for collision resolution?**  
   *Answer:* Chaining uses linked lists at each index for colliding items, while open addressing stores all items in the table itself using probing (e.g., linear probing).

10. **How would you implement resizing in a hash table?**  
    *Answer:* Double the table size, rehash all existing keys into the new table using the hash function, and update pointers.

---

### Group A, Assignment No. 2: Dictionary ADT Using Hashing with Chaining
**Problem Statement:** "Implement all the functions of a dictionary (ADT) using hashing and handle collisions using chaining with / without replacement. Data: Set of (key, value) pairs, Keys are mapped to values, Keys must be comparable, Keys must be unique. Standard Operations: Insert(key, value), Find(key), Delete(key)"

#### Viva Questions:
1. **What is an Abstract Data Type (ADT), and how does a dictionary ADT relate to hash tables?**  
   *Answer:* An ADT defines operations without implementation details. A dictionary ADT (key-value store) can be implemented with a hash table for efficient operations.

2. **What is chaining in the context of hash tables?**  
   *Answer:* Chaining resolves collisions by storing colliding elements in a linked list at the hashed index.

3. **What does "with replacement" and "without replacement" mean in chaining?**  
   *Answer:* "With replacement" might imply updating an existing key’s value; "without replacement" means keeping the original unless explicitly deleted—context may vary, but typically relates to duplicate handling.

4. **How does chaining affect the performance of insert, find, and delete operations?**  
   *Answer:* Average case remains O(1) if chains are short, but worst case becomes O(n) if many keys collide at one index.

5. **How do you implement the insert operation with chaining?**  
   *Answer:* Hash the key, append the (key, value) pair to the linked list at that index, checking for duplicates first.

6. **How do you handle the deletion of a key in a chained hash table?**  
   *Answer:* Hash the key, traverse the linked list at that index, remove the node with the matching key, and adjust pointers.

7. **What are the advantages and disadvantages of chaining compared to open addressing?**  
   *Answer:* Chaining handles unlimited collisions and is simpler, but uses extra memory for pointers. Open addressing saves space but struggles with high load factors.

8. **How do you ensure keys are unique in the dictionary?**  
   *Answer:* Before inserting, check the chain at the hashed index for the key; reject or update if it exists.

9. **What happens if you try to insert a key that already exists?**  
   *Answer:* Depending on the design, either overwrite the value or reject the insertion after checking the chain.

10. **How would you implement a find operation in a chained hash table?**  
    *Answer:* Hash the key, traverse the linked list at that index, return the value if found, or null if not.

---

### Group B, Assignment No. 3: Tree for Book Hierarchy
**Problem Statement:** "A book consists of chapters, chapters consist of sections and sections consist of subsections. Construct a tree and print the nodes. Find the time and space requirements of your method"

#### Viva Questions:
1. **What type of tree would you use to represent this hierarchy? Why?**  
   *Answer:* A general tree (n-ary tree) since each node (book, chapter, section) can have multiple children, reflecting the hierarchy.

2. **How would you define the nodes of the tree? What data would each node hold?**  
   *Answer:* Each node could have a name (e.g., "Chapter 1") and a list of child pointers (e.g., sections under a chapter).

3. **Can you sketch a sample tree for a book with two chapters, each having two sections, and each section having two subsections?**  
   *Answer:* Root: Book → Children: [Chapter 1, Chapter 2]; Chapter 1 → [Section 1.1, Section 1.2]; Section 1.1 → [Sub 1.1.1, Sub 1.1.2], etc.

4. **How would you implement the printing of the nodes? What traversal method would you use?**  
   *Answer:* Use preorder traversal (root, then children recursively) to print the hierarchy naturally.

5. **What is the time complexity of printing all nodes in the tree?**  
   *Answer:* O(n), where n is the total number of nodes, as each node is visited once.

6. **What is the space complexity of your tree structure?**  
   *Answer:* O(n) for storing n nodes, plus O(h) for recursion stack (h = height).

7. **How would you add a new subsection to an existing section?**  
   *Answer:* Locate the section node, append a new subsection node to its children list.

8. **How would you delete a chapter and all its sections and subsections?**  
   *Answer:* Recursively delete the chapter node and all its descendants, freeing memory.

9. **What’s the difference between a binary tree and a general tree? Which is used here?**  
   *Answer:* Binary trees have at most 2 children per node; general trees have any number. A general tree is used here.

10. **How would you find the depth of the tree?**  
    *Answer:* Recursively compute the maximum height from root to leaf: max(depth of each child) + 1.

---

### Group B, Assignment No. 4: Binary Search Tree Operations
**Problem Statement:** "Beginning with an empty binary search tree, Construct binary search tree by inserting the values in the order given. After constructing a binary tree - i. Insert new node, ii. Find number of nodes in longest path from root, iii. Minimum data value found in the tree, iv. Change a tree so that the roles of the left and right pointers are swapped at every node, v. Search a value"

#### Viva Questions:
1. **What is a binary search tree? What properties does it have?**  
   *Answer:* A BST is a binary tree where left child < node < right child, enabling efficient searching.

2. **How do you insert a new node into a BST?**  
   *Answer:* Compare the value with the current node, recurse left if smaller, right if larger, and insert at the null position.

3. **What is the time complexity of inserting a node into a BST?**  
   *Answer:* O(h), where h is the height; O(n) in worst case (skewed tree).

4. **How do you find the number of nodes in the longest path from the root? What is this path called?**  
   *Answer:* Compute the height (nodes from root to deepest leaf) recursively; it’s the height + 1 for node count.

5. **How do you find the minimum value in a BST?**  
   *Answer:* Traverse to the leftmost node, which is the smallest value.

6. **How do you swap the left and right pointers of every node in the tree?**  
   *Answer:* Recursively swap left and right child pointers at each node.

7. **What is the time complexity of searching for a value in a BST?**  
   *Answer:* O(h), where h is the height; O(n) in worst case.

8. **What happens if you insert nodes in sorted order into a BST?**  
   *Answer:* It becomes a skewed tree (like a linked list), with O(n) complexity for operations.

9. **How can you balance a BST?**  
   *Answer:* Use self-balancing techniques like AVL or Red-Black trees, or rebuild from sorted array.

10. **Can you perform an in-order traversal of the BST and explain what it represents?**  
    *Answer:* In-order (left, root, right) gives values in ascending order due to BST properties.

---

### Group B, Assignment No. 5: Dictionary Using Binary Search Tree
**Problem Statement:** "A Dictionary stores keywords and its meanings. Provide facility for adding new keywords, deleting keywords, updating values of any entry. Provide facility to display whole data sorted in ascending/ Descending order. Also find how many maximum comparisons may require for finding any keyword. Use Binary Search Tree for implementation"

#### Viva Questions:
1. **Why would you choose a BST over a hash table for this dictionary?**  
   *Answer:* BST allows sorted order traversal, which hash tables don’t naturally support.

2. **How do you insert a new keyword and its meaning into the BST?**  
   *Answer:* Insert the (keyword, meaning) pair based on keyword comparison, like a standard BST insert.

3. **How do you delete a keyword from the BST?**  
   *Answer:* Find the node, handle cases (no child, one child, two children) by adjusting pointers or replacing with successor.

4. **How do you update the meaning of an existing keyword?**  
   *Answer:* Search for the keyword, then modify its associated meaning value.

5. **How can you display all keywords in ascending order?**  
   *Answer:* Perform an in-order traversal (left, root, right).

6. **What is the time complexity of displaying all keywords in order?**  
   *Answer:* O(n), as each node is visited once.

7. **How many maximum comparisons are needed to find a keyword in a BST?**  
   *Answer:* Equal to the height h; O(n) in worst case (skewed tree).

8. **What is the worst-case scenario for searching in a BST?**  
   *Answer:* A skewed tree where all nodes are on one side, making search O(n).

9. **How does the height of the BST affect operation performance?**  
   *Answer:* Height determines complexity; shorter height (balanced) gives O(log n), taller gives O(n).

10. **How do you perform an in-order traversal to get sorted keywords?**  
    *Answer:* Recursively visit left subtree, root, right subtree to output keywords in ascending order.

---

### Group C, Assignment No. 6: Flight Paths Graph Representation
**Problem Statement:** "There are flight paths between cities. If there is a flight between city A and city B then there is an edge between the cities. The cost of the edge can be the time that flight takes to reach city B from A, or the amount of fuel used for the journey. Represent this as a graph. The node can be represented by airport name or name of the city. Use adjacency list representation of the graph or use adjacency matrix representation of the graph. Check whether the graph is connected or not. Justify the storage representation used"

#### Viva Questions:
1. **What is a graph in data structures? What are vertices and edges?**  
   *Answer:* A graph has vertices (nodes, e.g., cities) connected by edges (e.g., flights).

2. **What’s the difference between a directed and undirected graph? Which is appropriate here?**  
   *Answer:* Directed has one-way edges; undirected has two-way. Directed fits if flights are one-way.

3. **What is an adjacency list? How does it differ from an adjacency matrix?**  
   *Answer:* Adjacency list stores edges as lists per vertex; matrix uses a 2D array. List saves space for sparse graphs.

4. **When would you prefer an adjacency list over an adjacency matrix?**  
   *Answer:* For sparse graphs (few edges), as it uses less memory (O(V + E) vs. O(V²)).

5. **How do you represent weights in a graph using an adjacency list?**  
   *Answer:* Store each edge as a (node, weight) pair in the list.

6. **How can you check if the graph is connected?**  
   *Answer:* Use DFS or BFS from any node; if all nodes are visited, it’s connected.

7. **What algorithm would you use to check connectivity?**  
   *Answer:* DFS (depth-first search) or BFS (breadth-first search).

8. **What is the time complexity of checking connectivity using DFS?**  
   *Answer:* O(V + E) for adjacency list, where V is vertices, E is edges.

9. **How do you implement DFS or BFS on this graph?**  
   *Answer:* DFS: Recursively explore neighbors. BFS: Use a queue to explore level by level.

10. **Why choose your representation (list or matrix) for this problem?**  
    *Answer:* Adjacency list if flights are sparse (fewer connections); matrix if dense or frequent edge checks are needed.

---

### Group C, Assignment No. 7: Minimum Cost Office Connections
**Problem Statement:** "You have a business with several offices; you want to lease phone lines to connect them up with each other; and the phone company charges different amounts of money to connect different pairs of cities. You want a set of lines that connects all your offices with a minimum total cost. Solve the problem by suggesting appropriate data structures."

#### Viva Questions:
1. **What is a spanning tree?**  
   *Answer:* A subgraph connecting all vertices without cycles, with V-1 edges.

2. **What is a minimum spanning tree (MST)?**  
   *Answer:* A spanning tree with the minimum total edge weight.

3. **Which algorithms can be used to find an MST?**  
   *Answer:* Kruskal’s (edge-based) and Prim’s (vertex-based).

4. **How does Kruskal’s algorithm work?**  
   *Answer:* Sort edges by weight, add them to the MST if they don’t form a cycle, using Union-Find.

5. **How does Prim’s algorithm work?**  
   *Answer:* Start at a vertex, greedily add the cheapest edge to an unvisited vertex until all are included.

6. **What data structures would you use for Kruskal’s algorithm?**  
   *Answer:* Priority queue for sorting edges, Union-Find for cycle detection.

7. **What data structures would you use for Prim’s algorithm?**  
   *Answer:* Min-heap for selecting minimum edges, adjacency list for graph representation.

8. **What is the time complexity of Kruskal’s algorithm?**  
   *Answer:* O(E log E) due to edge sorting.

9. **What is the time complexity of Prim’s algorithm?**  
   *Answer:* O(E log V) with a binary heap and adjacency list.

10. **How do you ensure the MST connects all offices with minimum cost?**  
    *Answer:* Both algorithms guarantee a minimum sum of edge weights while ensuring connectivity.

---

### Group D, Assignment No. 8: Optimal Binary Search Tree
**Problem Statement:** "Given sequence k = k1 <k2 < … <kn of n sorted keys, with a search probability pi for each key ki. Build the Binary search tree that has the least search cost given the access probability for each key?"

#### Viva Questions:
1. **What is an optimal binary search tree?**  
   *Answer:* A BST minimizing the expected search cost based on key access probabilities.

2. **How is it different from a regular BST?**  
   *Answer:* It considers access frequencies to shape the tree, not just key order.

3. **What is the significance of access probabilities in this context?**  
   *Answer:* They determine how often each key is searched, affecting the tree’s structure for efficiency.

4. **How do you calculate the search cost in a BST?**  
   *Answer:* Sum of (probability of each key × its depth + 1).

5. **Can you explain the dynamic programming approach to construct an optimal BST?**  
   *Answer:* Use a DP table to compute minimum cost for all subtrees, choosing the optimal root each time.

6. **What is the time complexity of constructing an optimal BST?**  
   *Answer:* O(n³) using dynamic programming.

7. **How do you ensure the BST has the least search cost?**  
   *Answer:* Minimize the weighted path length via optimal root selection.

8. **Can you give an example of how the tree changes based on probabilities?**  
   *Answer:* High-probability keys move closer to the root to reduce their depth.

9. **What are the challenges in implementing an optimal BST?**  
   *Answer:* High time complexity and accurate probability estimation.

10. **How does an optimal BST compare to a balanced BST?**  
    *Answer:* Optimal BST may be unbalanced but has lower expected search cost for given probabilities.

---

### Group D, Assignment No. 9: Dictionary Using Height-Balanced Tree
**Problem Statement:** "A Dictionary stores keywords and its meanings. Provide facility for adding new keywords, deleting keywords, updating values of any entry. Provide facility to display whole data sorted in ascending/ Descending order. Also find how many maximum comparisons may require for finding any keyword. Use Height balance tree and find the complexity for finding a keyword"

#### Viva Questions:
1. **What is a height-balanced tree? Why is it important?**  
   *Answer:* A tree where the height difference between subtrees is limited (e.g., AVL), ensuring O(log n) operations.

2. **What is an AVL tree? How does it maintain balance?**  
   *Answer:* An AVL tree keeps the balance factor (|height(left) - height(right)| ≤ 1) using rotations.

3. **What are the rotation operations in an AVL tree?**  
   *Answer:* Left, Right, Left-Right, and Right-Left rotations to restore balance.

4. **How do you insert a new keyword into an AVL tree?**  
   *Answer:* Insert as in BST, then rebalance using rotations if needed.

5. **How do you delete a keyword from an AVL tree?**  
   *Answer:* Delete as in BST, then rebalance from the affected node upward.

6. **What is the time complexity of insert, delete, and search in an AVL tree?**  
   *Answer:* O(log n) due to logarithmic height.

7. **How many maximum comparisons are needed to find a keyword in an AVL tree?**  
   *Answer:* O(log n), equal to the height.

8. **How does an AVL tree ensure logarithmic height?**  
   *Answer:* Balancing after each operation keeps the height ≈ log n.

9. **What’s the difference between an AVL tree and a Red-Black tree?**  
   *Answer:* AVL is stricter (balance factor ≤ 1), Red-Black is more relaxed, allowing faster insertions/deletions.

10. **Why choose an AVL tree over a regular BST for this dictionary?**  
    *Answer:* Guarantees O(log n) operations, unlike a potentially skewed BST.

---

### Group E, Assignment No. 10: Marks Using Heap
**Problem Statement:** "Read the marks obtained by students of second year in an online examination of particular subject. Find out maximum and minimum marks obtained in that subject. Use heap data structure. Analyze the algorithm"

#### Viva Questions:
1. **What is a heap data structure?**  
   *Answer:* A binary tree where parent nodes are greater (max-heap) or less (min-heap) than children.

2. **What is the difference between a min-heap and a max-heap?**  
   *Answer:* Min-heap has smallest value at root; max-heap has largest.

3. **How can you use a heap to find the maximum mark?**  
   *Answer:* Build a max-heap; the root is the maximum.

4. **How can you use a heap to find the minimum mark?**  
   *Answer:* Build a min-heap; the root is the minimum.

5. **What is the time complexity of building a heap from a list of marks?**  
   *Answer:* O(n) using bottom-up heapification.

6. **What is the time complexity of extracting the max or min from a heap?**  
   *Answer:* O(log n) to remove root and reheapify.

7. **Can you explain the heapify operation?**  
   *Answer:* Adjust a node’s position to satisfy heap property by swapping with children.

8. **How would you implement a heap in code?**  
   *Answer:* Use an array; for index i, left child = 2i+1, right = 2i+2, parent = (i-1)/2.

9. **Why is a heap more efficient than a sorted array for finding max/min?**  
   *Answer:* Building a heap is O(n) vs. O(n log n) for sorting, and extraction is O(log n).

10. **What are the space requirements for a heap?**  
    *Answer:* O(n) for storing n elements in an array.

---

### Group F, Assignment No. 11: Student Information Sequential File
**Problem Statement:** "Department maintains a student information. The file contains roll number, name, division and address. Allow user to add, delete information of student. Display information of particular employee. If record of student does not exist an appropriate message is displayed. If it is, then the system displays the student details. Use sequential file to main the data"

#### Viva Questions:
1. **What is a sequential file? How is it different from a random access file?**  
   *Answer:* Sequential files are read/written in order; random access allows direct index access.

2. **How do you add a new student record to a sequential file?**  
   *Answer:* Append the record to the end of the file.

3. **How do you delete a student record from a sequential file?**  
   *Answer:* Copy all records except the target to a new file, then replace the original.

4. **How do you search for a particular student’s information?**  
   *Answer:* Read the file sequentially, comparing roll numbers until a match or end.

5. **What are the disadvantages of using a sequential file?**  
   *Answer:* Slow for search/delete (O(n)), no direct access.

6. **How do you handle updates to existing records in a sequential file?**  
   *Answer:* Rewrite the file with the updated record in place.

7. **What is the time complexity of searching in a sequential file?**  
   *Answer:* O(n), as all records may need checking.

8. **How do you ensure data consistency when adding or deleting?**  
   *Answer:* Use temporary files and atomic operations to avoid corruption.

9. **Can you explain the process of reading and writing to a file in code?**  
   *Answer:* Open file, use read/write functions (e.g., fread/fwrite in C), close file.

10. **Why might you choose a sequential file over a database?**  
    *Answer:* Simplicity and low overhead for small, linearly accessed data.

---

### Group F, Assignment No. 12: Employee Information Sequential File
**Problem Statement:** "Company maintains employee information as employee ID, name, designation and salary. Allow user to add, delete information of employee. Display information of particular employee. If employee does not exist an appropriate message is displayed. If it is, then the system displays the employee details. Use sequential file to main the data"

#### Viva Questions:
1. **How is this problem different from the student information problem?**  
   *Answer:* Fields differ (employee ID vs. roll number, salary vs. address), but structure is similar.

2. **What fields would you include in the employee record?**  
   *Answer:* Employee ID, name, designation, salary.

3. **How do you ensure employee IDs are unique?**  
   *Answer:* Check the file for the ID before adding a new record.

4. **Can you implement a search by employee ID? How efficient is it?**  
   *Answer:* Sequential search by ID; O(n) efficiency.

5. **How would you sort the employee records by salary?**  
   *Answer:* Load records into memory, sort (e.g., quicksort), rewrite file—O(n log n).

6. **What if you need frequent salary updates? Is a sequential file suitable?**  
   *Answer:* No, frequent updates are inefficient due to rewriting the entire file.

7. **How do you handle deletion of an employee record?**  
   *Answer:* Copy all records except the target to a new file.

8. **What are the advantages of using a sequential file here?**  
   *Answer:* Simple to implement, good for sequential access.

9. **How do you manage file size as the number of employees grows?**  
   *Answer:* Monitor storage, possibly split into multiple files or switch to a database.

10. **Can you think of a way to improve search efficiency?**  
    *Answer:* Index the file with employee IDs in a separate structure (e.g., BST) for faster lookups.

---
